$(document).ready(function(){	

	$.extend(jQuery.validator.messages, {
		required: "This field is required",
	});

	if($.validator){
		$.validator.setDefaults({
			// debug: false,
			highlight: function(element){
				if( $(element).is("[type='radio']") ){
					var inputGroup = $(element).closest(".row");
					inputGroup.addClass("error");
				}
				else{
					const id = element.id ? element.id : $(element).attr('data-id');
					$(element.form).find("label[for=" + id + "]").addClass("text-danger");
				}
				$(element).addClass("error border-danger");
                // Make `form-text`(helper text) text color red
				$($(element)?.attr('aria-describedby')?.split(" ").map(s=>`#${s}`).join(",")).each((i, e)=>{
                    if ($(e).hasClass("form-text")){
                        $(e).addClass("text-danger");
                    }
                })
				if($(element).closest(".input-group").length){ // case for group inputs
					$(element).closest(".input-group").find(".input-group-text").addClass("border-danger");
				}
			},
			unhighlight: function(element){
				if( $(element).is("[type='radio']") ){
					var inputGroup = $(element).closest(".row");
					inputGroup.removeClass("error");
				}
				else{
					const id = element.id ? element.id : $(element).attr('data-id');
					$(element.form).find("label[for=" + id +"]").removeClass("text-danger");
				}
                // Remove `form-text`(helper text) text color red
				$($(element)?.attr('aria-describedby')?.split(" ").map(s=>`#${s}`).join(",")).each((i, e)=>{
                    if ($(e).hasClass("form-text")){
                        $(e).removeClass("text-danger");
                    }
                })
				// $($(element)?.attr('aria-describedby')?.split(" ").map(s=>`#${s}`).join(",")).hasClass("form-text").removeClass("text-danger");
				$(element).removeClass("error border-danger");
				if($(element).closest(".input-group").length){ // case for group inputs
					$(element).closest(".input-group").find(".input-group-text").removeClass("border-danger");
				}
				if ( ($(element).is("[type='button']")) && ($(element).hasClass('btn-primary')) ){
					$(element).addClass("text-white");
				}
			},
			errorElement: 'div',
			errorClass: 'invalid-feedback',
            errorPlacement: function (error, element) {
                if (element.closest('.input-group').length > 0) {
                    element.closest('.input-group').after(error);
                } else {
                    error.insertAfter(element);
                }
            },
		});
	}

	if($.validator){		
		$.validator.addMethod("g_validate_reg_exp", function(value, element, params) {
			if(value === ''){
				return true;
			}

			$.validator.messages.g_validate_reg_exp = params.message;
			if(params.regex === undefined || params.regex === '') {
				return false;
			}			
			var isValid = validate_data(params, value);			
			return isValid;
		}, '');
		$.validator.addMethod("g_is_elements_same", function(value, element, params) {
			$.validator.messages.g_is_elements_same = params.message;
			
			if(value === ''){
				return true;
			}
			
			if(params.equalsTo === undefined || params.equalsTo === ''){
				return false;
			}			
			
			let currentVal = value;
			let equalVal = $('#'+params.equalsTo.ctrl).val();
			
			if(equalVal == ""){
				currentVal = "";
			}
			if(params.equalsTo.ignoreCase){
				currentVal = currentVal.toUpperCase();
				equalVal = equalVal.toUpperCase();
			}
			
			if(currentVal === equalVal) {
				isValid = true;
			}			
			else{
				isValid = false;				
			}			
			return isValid;
		}, '');
		$.validator.addMethod("g_is_elements_not_same", function (value, element, params) {
			$.validator.messages.g_is_elements_not_same = params.message;
			if (value === '') {
				return true;
			}

			if (params.notEqualsTo === undefined || params.notEqualsTo === '') {
				return false;
			}			

			let currentVal = value;
			let equalVal = $(`#${params.notEqualsTo.ctrl}`).val();

			if (equalVal === '') {
				return true;
			}

			if (params.notEqualsTo.ignoreCase) {
				currentVal = currentVal?.toUpperCase();
				equalVal = equalVal?.toUpperCase();
			}
			
			if (currentVal !== equalVal) {
				return true;
			} else {
				return false;
			}
		}, '');		
		$.validator.addMethod("g_is_same_email", function(value, element, params) {    			
			ctrl = params.equalsTo.ctrl;
			ignoreCase = params.equalsTo.ignoreCase;
			$.validator.messages.g_is_same_email = params.message;
			ctrl_value = $('#'+ctrl).val();
			if(ignoreCase){
				value = value.toLowerCase();
				ctrl_value = ctrl_value.toLowerCase();
			}
			if(value === ctrl_value)
				return false;
			return true;
		}, "");
		$.validator.addMethod("g_is_same_phone", function(value, element, params) {    			
		  ctrl = params.equalsTo.ctrl;
		  $.validator.messages.g_is_same_phone = params.message;
		  ctrl_value = $('#'+ctrl).val();
		  if (value === ctrl_value) return false;
		  return true;
		}, "");		
		$.validator.addMethod("g_is_value_in_range", function(value, element, params) {
			if(value !== ''){
				if(!(value.length >= params.minLength && value.length <= params.maxLength)){
					$.validator.messages.g_is_value_in_range = params.message;
					return false;
				} else{
					return true;
				}
			} else{			
				return true;
			}
		}, "");

		$.validator.addMethod("g_is_valid_email", function(value, element, params) {
			if(params.regex === undefined || params.regex === '') {
				params.regex = /^([a-zA-Z0-9_\.\-])+\@(([a-zA-Z0-9\-])+\.)+([a-zA-Z0-9]{2,4})+$/;
			}
			
			var isValid = validate_data(params, value);
			if(!isValid){
				$.validator.messages.g_is_valid_email = params.message;
			}
			return isValid;
		}, '');		

		$.validator.addMethod("g_validate_min_length", function(value, element, params) {
			if(value !== ''){
				if(value.length < params.minLength){
					$.validator.messages.g_validate_min_length = params.message;
					return false;
				} else{
					return true;
				}
			} else{			
				return true;
			}
		}, "");
		jQuery.validator.addMethod("g_validate_noSpace", function (value, element) {
			if(value !== '') {
				return value.indexOf(" ") < 0;
			} else {			
				return true;
			}
		}, "Space are not allowed");
		
		$.validator.addMethod("g_validate_space_min_length", function(value, element, params) {
			let trimmedVal = $.trim(value);
			const validationMessages = {
				'minLength': `Minimum ${params.minLength} characters`
			};

			if(trimmedVal !== ''){
				if(trimmedVal.length < params.minLength){
					$.validator.messages.g_validate_space_min_length = validationMessages.minLength;
					return false;
				} else{
					return true;
				}
			} else{			
				return true;
			}
		}, '');
        
        $.validator.addMethod("g_validate_max_length", function(value, element, params) {
			if(value !== ''){
				if(value.length > params.maxLength){
					$.validator.messages.g_validate_max_length = params.message;
					return false;
				} else{
					return true;
				}
			} else{			
				return true;
			}
		}, "");
        
        $.validator.addMethod("g_is_radio_chosen", function(value, element, params) {
			if(value !== ""){			
				if($("input[name='"+element.name+"']:checked").length > 0){
					return true;
				}
			}
			$.validator.messages.g_is_radio_chosen = params.message;
			return false;
        }, "");
        
		$.validator.addMethod("g_is_option_selected", function(value, element, params) {
			if(element.type == 'select-one'){
				if($(element).attr('prev') !== undefined && $(element).attr('prev').length > 0){
					if(value == ""){
						$.validator.messages.g_is_option_selected = params.message;
						return false;
					}
				}
			}
			if(value === undefined){
				value = "";
			}
			if(value !== ""){
				if(element.type == 'select-one'){
					if ($(element).val() !== ''){
						$.validator.messages.g_is_option_selected = '';
						return true;
					}
				}
				else {
					if($("input[name='"+element.name+"']:checked").length > 0){
						$.validator.messages.g_is_option_selected = '';
						return true;
					}
				}
				$.validator.messages.g_is_option_selected = params.message;
				return false;
			}
			return true;
		}, "");

		$.validator.addMethod("g_allow_alpha_numeric", function(value, element, params) {
			if(params.regex === undefined || params.regex === ''){
				params.regex = /^[a-zA-Z0-9 ]+$/;
			}
		
			var isValid = validate_data(params, value);
			if(!isValid){
				$.validator.messages.g_allow_alpha_numeric = params.message;
			}
			return isValid
		}, "");	

		$.validator.addMethod("g_allow_only_numeric", function(value, element, params) {
			if(params.regex === undefined || params.regex === ''){
				params.regex = /^[0-9]+$/;
			}
		
			var isValid = validate_data(params, value);
			if(!isValid){
				$.validator.messages.g_allow_only_numeric = params.message;
			}
			return isValid
		}, "");	

		$.validator.addMethod("g_validate_min_max_value", function(value, element, params) {
			if(params.regex === undefined || params.regex === ''){
				params.regex = /^[0-9]+$/;
			}
			let isValid = false;
			
			if(value !== ''){
				isValid = validate_data(params, value);
				if(isValid) {
					try {
						let val = parseInt(value);
						if(val>=params.min && val<=params.max){
							isValid = true;
						} else {
							isValid = false;
						}
					} catch(error){
						console.log(error);
						isValid = false;
					}
				}
				if(!isValid && params.message){
					$.validator.messages.g_validate_min_max_value = params.message;
				}
				return isValid
			} else {			
				return true;
			}
		}, "");	
		$.validator.addMethod("g_validate_min_max_value_with_commas", function(value, element, params) {
			if(params.regex === undefined || params.regex === ''){
				params.regex = /^[0-9]+$/;
			}
			let isValid = false;
			value = value.replaceAll(',','');
			
			if(value !== ''){
				isValid = validate_data(params, value);
				if(isValid) {
					try {
						let val = parseInt(value);
						if(val>=params.min && val<=params.max){
							isValid = true;
						} else {
							isValid = false;
						}
					} catch(error){
						console.log(error);
						isValid = false;
					}
				}
				if(!isValid && params.message){
					$.validator.messages.g_validate_min_max_value_with_commas = params.message;
				}
				return isValid
			} else {			
				return true;
			}
		}, "");
		$.validator.addMethod("g_allow_all_characters", function(value, element, params) {
			if(params.regex === undefined || params.regex === ''){
				params.regex = /^[a-zA-Z0-9!@#\$%\^\&*\)\(" ';,:?+=._~<>`{}|/\-[/\]\\/]+$/;
			}
		
			var isValid = validate_data(params, value);
			if(!isValid){
				$.validator.messages.g_allow_all_characters = params.message;
			}
			return isValid
		}, "");	
	
		/**
	 * this method can be configured in form validation when you want to allow only alphabets in an element
	 * sample input:
	 * g_allow_only_alpha:	{
						'regex': /^[a-zA-Z ]+$/,
						'ignore_validation': false,
						'message': 'Invalid entry. Please try again.', 
						'required': true
					}
	*/
		$.validator.addMethod("g_allow_only_alpha", function(value, element, params) {
			if(params.regex === undefined || params.regex === ''){
				params.regex = /^[a-zA-Z ]+$/;
			}
		
			var isValid = validate_data(params, value);
			if(!isValid){
				$.validator.messages.g_allow_only_alpha = params.message;
			}
			return isValid
		}, "");	

		/**
	 * this method can be configured in form validation when you want to validate a date
	 * sample input:
	 * g_validate_date: {
						'format': 'MM/DD/YYYY', 
						'message': 'Invalid entry. Please try again.', 
						'required': true,
						'validate':{'allow_future_date':false,'allow_future_date_message':'Date cannot be future.'}
					}
	*/
		$.validator.addMethod("g_validate_date", function(value, element, params) {
			if	(value === ''){			
				return true;
			}
			var aDate   = moment(value, params.format, true);
			var isValid = aDate.isValid();
			var isFutureDate = false;
			if(!params.validate.allow_future_date) {
				isFutureDate = aDate.isAfter();
				if(isFutureDate){
					$.validator.messages.g_validate_date = params.validate.allow_future_date_message;
					return false;
				}
			}
			if(!isValid){
				$.validator.messages.g_validate_date = params.message;
				return false;
			}
			return true;
		}, '');		

		$.validator.addMethod("isValidSSN", function (value, element) {
			//return this.optional(element) || /^(?!000|666)[0-9]{3}([ -]?)(?!00)[0-9]{2}\1(?!0000)[0-9]{4}$/.test(value);
			//PRPS-1439 removed leading zeros validation
			return this.optional(element) || /^[0-9]{3}([ -]?)[0-9]{2}\1[0-9]{4}$/.test(value);
		}, "xxx-xx-xxxx");

		$.validator.addMethod("isValidDate", function (value, element) {
			return this.optional(element) || /^(0[1-9]|1[012])[- /.](0[1-9]|[12][0-9]|3[01])[- /.](19|20)\d{2}$/.test(value);
		}, "use mm/dd/yyyy");

		$.validator.addMethod("isValidPhone", function(value, element) {
			var testResult = this.optional(element) || /^[0-9]{3}([ -]?)[0-9]{3}\1[0-9]{4}$/.test(value);
			if(testResult == false){
				$('.connect-access .forgotUserPass-proceedCancel-wrap .userPass-continueBtn').prop('disabled', true);
			}
			return testResult;
		},"xxx-xxx-xxxx");

		$.validator.addMethod("noEmptySpace", function(value, element) { 
	    	return value == '' || value.trim().length != 0;  
	    }, "Minimum 2 characters");

	}

	/**
	 * this method can be called when you want to reset the form validation and remove the error classes
	 * Array of error class can be passed as parameter
	 */
	$.fn.clearFormValidation = function(){
        var v = $(this).validate();
        let args = arguments;
        if(args.length == 0){
            args = ['error'];
        }
		$('[name]',this).each(
			function(){
				element = $(this);
				$.each(Array.prototype.slice.call(args), function(idx, class_name){                    
                    obj = element[0];
                    if( $(obj).is("[type='radio']") ){
                        var inputGroup = $(obj).closest(".row");
                        inputGroup.removeClass("error");
                    }
                    else{
                        $(obj.form).find("label[for=" + obj.id +"]").removeClass("error");
                    }
                    $(obj).removeClass("error").css("border-color","#CCCCCC").css("color","#000000");
				})				
            });
            if(v !== undefined){
                v.resetForm();v.reset();
            }
		$(this).trigger("reset");
	}
	
	$.fn.capitalize = function(){
		$(this[0]).keyup(function(event) {
			var box = event.target;
			var txt = $(this).val();
			var stringStart = box.selectionStart;
			var stringEnd = box.selectionEnd;
			$(this).val(txt.replace(/^(.)|(\s|\-)(.)/g, function($word) {
				return $word.toUpperCase();
			}));
			box.setSelectionRange(stringStart , stringEnd);
		});

		return this;	
	}
});

function validate_data(params, value){
	regex = (params.regex);
	if	(value === ''){			
		return true;
	}
	if (regex.test(value)) {			
		return true;
	} else {
		return false;
	}
}


var g_mobile_device = {
	is_android: function() {
		return (navigator.userAgent.match(/Android/i) && navigator.userAgent.match(/mobile|Mobile/i)
		|| navigator.platform.match(/Android/i) && navigator.platform.match(/mobile|Mobile/i)) != null ? true : false;
	},
	is_black_berry: function() {
		return (navigator.userAgent.match(/BlackBerry/i)|| navigator.userAgent.match(/BB10; Touch/)
    || navigator.platform.match(/BlackBerry/i) && navigator.platform.match(/BB10; Touch/))  != null ? true : false;
	},
	is_iOS: function() {
		return (navigator.userAgent.match(/iPhone|iPod/i)
    || navigator.platform.match(/iPhone|iPod/i))  != null ? true : false;
	},
	is_opera: function() {
		return (navigator.userAgent.match(/Opera Mini/i)
    || navigator.platform.match(/Opera Mini/i))  != null ? true : false;
	},
	is_windows: function() {
		return (navigator.userAgent.match(/IEMobile/i) || navigator.userAgent.match(/webOS/i)
    || navigator.platform.match(/IEMobile/i) && navigator.platform.match(/webOS/i))  != null ? true : false;
	},
	any: function() {
		return (g_mobile_device.is_android() || g_mobile_device.is_black_berry() || g_mobile_device.is_iOS() || g_mobile_device.is_opera() || g_mobile_device.is_windows());
	}
};


restrict_keypress = {
	/**
   * 
   * @param {*} obj element for which events need to bind
   * @param {*} regex regular expression that need to be validated on key press
   * @param {*} regex_replace regular expression that need to be used while replacing
   * @param {*} regex_replace_chars characters to replace when regex_replace finds matched string
   */
	init: function(obj, regex, regex_replace, regex_replace_chars=''){    
		obj.attr('regex', regex);
		obj.attr('regex_replace', regex_replace);
		obj.attr('regex_replace_chars', regex_replace_chars);
		obj.on('keypress', this.restrict_keypress);
    
		if(g_mobile_device.any()){
			obj.on('input', this.restrict_keypress_mobile);
		}
	},
	restrict_keypress: function(e){
		var eventCode = e.which;
		var regex = new RegExp(eval($(e.target).attr('regex')));
		var key = String.fromCharCode(eventCode);
		if (!regex.test(key)) {
			e.preventDefault();
		}
	},
	restrict_keypress_mobile: function(e){
		var eventCode = e.which || e.keyCode || e.charCode;
		//do not act when space, backspace, tab, shift is pressed
		if(eventCode === 8 || eventCode === 9 || eventCode === 16 || eventCode === 37 
      		|| eventCode === 39 || eventCode === 32 || eventCode === 46){
			return;
	  	}
		var regex = new RegExp(eval($(e.target).attr('regex')));
		val = $(e.target).val();
		var cleanVal = val.replace(eval($(e.target).attr('regex_replace')), $(e.target).attr('regex_replace_chars'));		
		$(e.target).val(cleanVal);

		var key = String.fromCharCode(eventCode);
		if (!regex.test(key)) {
			e.preventDefault();
		}
	}
}
/**
   * Function to enable/disable button that is passed to this method
   *
   * @param {element} element element that is affected by keyup event.
   * @param {button} btn_id button to enable/disable based on form validation.
   */
  function get_button_view(element, btn_id){
	let disable_button = false;
	if(!$($(element)[0].form).valid()){
		disable_button = true;
	} else{
		let rules = $($(element)[0].form).validate().settings.rules
		let is_element_radio = false;
		let element_name = '';
		if(element.type == "radio"){
			is_element_radio = true;
			element_name = element.name;
		}
		elementValue = '';				
		$.each(rules, function(id,value){
			elementValue = $('#'+id).val();
			if(elementValue === undefined || (is_element_radio && element_name == id)){
				elementValue = $("input[name='"+id+"']:checked"). val();
			}			
			$.each(value, function(methodName, params){
				if(params.required && elementValue === ''){
					//if(!params.ignore_validation){
						if(params.dependents !== '' && params.dependents !== undefined){
							$.each(params.dependents, function(obj, val){
								dependent_ctrl = val.ctrl;
								dependent_type = val.type;
								dependent_valid_value = val.valid_value;
								if(dependent_type === 'radio'){
									if($('#'+dependent_ctrl)[0].checked === dependent_valid_value){
										disable_button = true;
									}
								}
								else if(dependent_type === 'text'){
									if($('#'+dependent_ctrl).val() === dependent_valid_value){
										disable_button = true;
									}
								}
								else if(dependent_type === 'select'){
									if($('#'+dependent_ctrl).val() === dependent_valid_value){
										disable_button = true;
									}
								}	
							});							
						} else{
							disable_button = true;
						}							
					//}
				}
				else if(params.required && elementValue === undefined){
					disable_button = true;
				}				
			})
		})
	}
    //$('#'+btn_id).attr('disabled', disable_button);	
    return disable_button;
}


